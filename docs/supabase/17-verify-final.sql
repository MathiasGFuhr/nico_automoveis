-- =====================================================
-- VERIFICA√á√ÉO FINAL DO BANCO - NICO AUTOM√ìVEIS
-- =====================================================
-- Este script verifica se tudo est√° funcionando sem gerar erros

-- =====================================================
-- 1. VERIFICAR ESTRUTURA B√ÅSICA
-- =====================================================

SELECT 
    'ESTRUTURA DO BANCO' as verificacao,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users' AND table_schema = 'public')
        THEN '‚úÖ Tabela users: OK'
        ELSE '‚ùå Tabela users: FALTANDO'
    END as tabela_users,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'clients' AND table_schema = 'public')
        THEN '‚úÖ Tabela clients: OK'
        ELSE '‚ùå Tabela clients: FALTANDO'
    END as tabela_clients,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'vehicles' AND table_schema = 'public')
        THEN '‚úÖ Tabela vehicles: OK'
        ELSE '‚ùå Tabela vehicles: FALTANDO'
    END as tabela_vehicles,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sales' AND table_schema = 'public')
        THEN '‚úÖ Tabela sales: OK'
        ELSE '‚ùå Tabela sales: FALTANDO'
    END as tabela_sales;

-- =====================================================
-- 2. VERIFICAR DADOS ESSENCIAIS
-- =====================================================

-- Verificar vendedores
SELECT 
    'VENDEDORES' as tipo,
    COUNT(*) as total,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå FALTANDO'
    END as status,
    STRING_AGG(name, ', ') as nomes
FROM users WHERE role = 'seller';

-- Verificar clientes
SELECT 
    'CLIENTES' as tipo,
    COUNT(*) as total,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå FALTANDO'
    END as status
FROM clients;

-- Verificar ve√≠culos
SELECT 
    'VE√çCULOS' as tipo,
    COUNT(*) as total,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå FALTANDO'
    END as status
FROM vehicles;

-- Verificar vendas
SELECT 
    'VENDAS' as tipo,
    COUNT(*) as total,
    CASE 
        WHEN COUNT(*) >= 0 THEN '‚úÖ OK'
        ELSE '‚ùå ERRO'
    END as status
FROM sales;

-- =====================================================
-- 3. VERIFICAR VENDEDORES ESPEC√çFICOS
-- =====================================================

SELECT 
    'VENDEDORES ESPEC√çFICOS' as verificacao,
    CASE 
        WHEN EXISTS (SELECT 1 FROM users WHERE id = '00000000-0000-0000-0000-000000000001')
        THEN '‚úÖ Nico: OK'
        ELSE '‚ùå Nico: FALTANDO'
    END as nico,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM users WHERE id = '00000000-0000-0000-0000-000000000002')
        THEN '‚úÖ Lucas: OK'
        ELSE '‚ùå Lucas: FALTANDO'
    END as lucas,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM users WHERE id = '00000000-0000-0000-0000-000000000003')
        THEN '‚úÖ Maria: OK'
        ELSE '‚ùå Maria: FALTANDO'
    END as maria;

-- =====================================================
-- 4. TESTE DE VENDA SEGURO
-- =====================================================

DO $$
DECLARE
    test_client_id UUID;
    test_vehicle_id UUID;
    test_seller_id UUID;
    test_sale_id UUID;
    short_code TEXT;
    test_result TEXT;
BEGIN
    -- Buscar IDs de teste
    SELECT id INTO test_client_id FROM clients LIMIT 1;
    SELECT id INTO test_vehicle_id FROM vehicles LIMIT 1;
    SELECT id INTO test_seller_id FROM users WHERE role = 'seller' LIMIT 1;
    
    -- Gerar c√≥digo curto (m√°ximo 15 caracteres)
    short_code := 'TEST' || (EXTRACT(EPOCH FROM NOW())::BIGINT % 100000)::TEXT;
    
    -- Verificar se temos todos os dados necess√°rios
    IF test_client_id IS NOT NULL AND test_vehicle_id IS NOT NULL AND test_seller_id IS NOT NULL THEN
        BEGIN
            -- Inserir venda de teste
            INSERT INTO sales (
                client_id, 
                vehicle_id, 
                seller_id, 
                sale_code, 
                price, 
                commission_rate, 
                payment_method, 
                status
            ) VALUES (
                test_client_id,
                test_vehicle_id,
                test_seller_id,
                short_code,
                1000.00,
                5.00,
                '√Ä vista',
                'completed'
            ) RETURNING id INTO test_sale_id;
            
            -- Remover venda de teste
            DELETE FROM sales WHERE id = test_sale_id;
            
            test_result := '‚úÖ TESTE DE VENDA: OK - Sistema funcionando';
        EXCEPTION
            WHEN OTHERS THEN
                test_result := '‚ùå TESTE DE VENDA: ERRO - ' || SQLERRM;
        END;
    ELSE
        test_result := '‚ùå TESTE DE VENDA: FALHOU - Dados insuficientes';
    END IF;
    
    RAISE NOTICE '%', test_result;
END $$;

-- =====================================================
-- 5. RESUMO FINAL
-- =====================================================

SELECT 
    'üéØ VERIFICA√á√ÉO FINAL CONCLU√çDA' as status,
    'Execute este script para verificar o status completo' as instrucao,
    'Se todos os itens mostram ‚úÖ, o sistema est√° funcionando perfeitamente' as resultado;

-- =====================================================
-- 6. CONTAGEM FINAL
-- =====================================================

SELECT 
    'CONTAGEM FINAL' as tipo,
    (SELECT COUNT(*) FROM users WHERE role = 'seller') as vendedores,
    (SELECT COUNT(*) FROM clients) as clientes,
    (SELECT COUNT(*) FROM vehicles) as veiculos,
    (SELECT COUNT(*) FROM sales) as vendas,
    (SELECT COUNT(*) FROM categories) as categorias,
    (SELECT COUNT(*) FROM brands) as marcas;

-- =====================================================
-- NOTA IMPORTANTE
-- =====================================================
-- 
-- Este script √© totalmente seguro e:
-- ‚úÖ N√£o gera c√≥digos longos
-- ‚úÖ N√£o duplica dados
-- ‚úÖ Testa opera√ß√µes b√°sicas
-- ‚úÖ Fornece feedback claro
-- ‚úÖ N√£o causa erros
-- 
-- =====================================================
